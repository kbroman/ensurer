% Generated by roxygen2 (4.0.1): do not edit by hand
\name{ensure_that}
\alias{ensure_that}
\alias{ensures_that}
\title{Ensure certain conditions for a value at runtime.}
\usage{
ensure_that(value., ...)

ensures_that(...)
}
\arguments{
\item{value.}{The value which is to be ensured.}

\item{...}{conditions which must pass for the ensuring contract to be
fulfilled. Any named argument will treated as values available
when evaluating the conditions. To reference the value itself
use the dot-placeholder, \code{`.`}. See 'Details' for some special
named arguments.}
}
\value{
\code{ensures_that} returns an ensuring function; \code{ensure_that}
returns the value itself on success.
}
\description{
Use \code{ensure_that} (imperitive form) to ensure conditions for
a value "on the fly". The present tense form, \code{ensures_that}
is used to make reusable "contracts" (functions) which can subsequently be
applied to values, see examples.
}
\details{
There are special named arguments which can be used to
tweak the behavior upon failure:
\tabular{ll}{
\code{fail_with} \tab a static value, or a unary function which accept a
\code{simpleError} as argument.\cr
\code{err_desc} \tab can be specified to append a description upon error.
This can be useful when the same conditions occur at different places.
}
}
\examples{
\dontrun{
library(magrittr)

# Create a contract which can ensure that a matrix is square.
ensure_square <- ensures_that(NCOL(.) == NROW(.))

# apply it.
A <-
  diag(4) \%>\%
  ensure_square

# Without the pipe operator:
A <- ensure_square(diag(4))

# Ensure on the fly (this will pass the test)
A <-
  matrix(runif(16), 4, 4) \%>\%
  ensure_that(ncol(.) == nrow(.), all(. <= 1))

# This will raise an error
A <-
  matrix(NA, 4, 4) \%>\%
  ensure_that(. \%>\% anyNA \%>\% not)

# Tweak failure:
A <-
  1:10 \%>\%
  ensure_that(all(. < 5), err_desc = "Number tests!")

# A default value for failure situations:
A <-
  1:10 \%>\%
  ensure_that(all(. < 5), fail_with = NA)

# Suppose you had an email function:
email_err <- function(e) {email(e$message); stop(e)}

A <-
  1:10 \%>\%
  ensure_that(all(. < 5), fail_with = email_err)

}
}

